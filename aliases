##### LIST OF TOOLS AND VARIABLES #####

declare -a list_of_tools=(
        "terraform TF_VERSION"
        "go GO_VERSION"
	"nodejs NODE_VERSION"
)

##### DEFINING BASE IMAGE #####

function add_installations() {
        generic_install make ;
        generic_install mlocate ;
        generic_install bash ;
        generic_install openssh git ;
        for tool in "${list_of_tools[@]}" ; do
                [ $(find_version $(echo $tool | cut -d " " -f 1)) ] && install_$(echo $tool | cut -d " " -f 1)
        done
}

##### DEFINING CONTAINER #####

function execute {
        [[ ${2} == "main-tools" ]] && set-base ;
        echo "You got into a container with ${2} as image" ;
        docker run --rm -it \
        --entrypoint ${1} \
        -v ${HOME}:/root \
        -w /root${PWD#$HOME} \
        -e TF_LOG=$TF_LOG \
        -e AWS_PROFILE=$AWS_PROFILE \
        ${2} ${@:3} ; }

##### CONTROLLING VERSIONS #####

function read-versions {
        [ -f ./.tool-versions ] && local vFile="./.tool-versions" || local vFile="$HOME/.tool-versions"
        echo "Your setup is:" && cat $vFile ;
        alias file_column='echo $line | cut -d " " -f' ; alias tool_column='echo $tool | cut -d " " -f' ;
        while read line; do 
		for tool in "${list_of_tools[@]}" ; do
                        [[ $(tool_column 1) == $(file_column 1) ]] && export "$(tool_column 2)=$(file_column 2)" # || unset $(tool_column 2)
                done
        done < $vFile
        local variables="|" && for tool in "${list_of_tools[@]}" ; do variables+=" $(tool_column 2) |" ; done
        echo -e "You may want to set, unset of modify following variables: \n$variables"
        unalias file_column tool_column ;
}

function update-versions {
        alias tool_column='echo $tool | cut -d " " -f'
        for tool in "${list_of_tools[@]}" ; do [ -v $(tool_column 2) ] && : > ./.tool-versions ; done
        for tool in "${list_of_tools[@]}" ; do
                [ -v $(tool_column 2) ] && echo "$(tool_column 1) $(eval echo \$$(tool_column 2))" >> ./.tool-versions
        done
        unalias tool_column
}

function versions-modified { ! cmp -s ~/.tool-versions ./.tool-versions ; }
function set-tools-file { cp ./.tool-versions ~/.tool-versions ; }
function find_version { grep -i -m 1 ${1} ~/.tool-versions | cut -d " " -f 2 ; }

##### HELPERS #####

function no-image { [[ "$(docker images -q main-tools:latest 2> /dev/null)" == "" ]]; }

##### BUILDING IMAGE #####

function set-base() {
        update-versions ;
        if [ -f ./.tool-versions ] && versions-modified || no-image ; then
        set-tools-file ;
        # [ -v IMAGE ] || To Do: Implement different base images
        local IMAGE=alpine:latest
	echo "Building image from $IMAGE... your setup is:" && cat ~/.tool-versions ;
	echo -e "FROM $IMAGE \nRUN apk update" > /tmp/Dockerfile ;
	add_installations ;
        sudo docker build --no-cache -t main-tools:latest /tmp && rm /tmp/Dockerfile ;
        docker rmi $(docker images -qa -f 'dangling=true') ;
        fi ; }

##### CALLING THE TOOLS #####

alias make="execute make main-tools"
alias git="execute git alpine/git"
alias aws="execute aws amazon/aws-cli"
alias terraform="execute terraform main-tools"
alias go="execute go main-tools"
# alias debug-image="execute sh main-tools"
# alias k9s="execute k9s quay.io/derailed/k9s"

##### INSTALLATIONS #####

function generic_install() { echo "RUN apk add ${@}" >> /tmp/Dockerfile ; }

function install_terraform() {  echo "
	# Terraform installation
	RUN wget https://releases.hashicorp.com/terraform/$(find_version terraform)/terraform_$(find_version terraform)_linux_amd64.zip
        RUN unzip terraform_$(find_version terraform)_linux_amd64.zip && rm terraform_$(find_version terraform)_linux_amd64.zip
        RUN mv terraform /usr/bin/terraform" >> /tmp/Dockerfile ; }

function install_go() { echo "
        # Golang installation
	COPY --from=golang:$(find_version go)-alpine /usr/local/go/ /usr/local/go/
        ENV PATH=\"/usr/local/go/bin:${PATH}\"" >> /tmp/Dockerfile ; }

function install_nodejs() { echo "
	# Nodejs installation
	COPY --from=node:$(find_version nodejs)-alpine /usr/lib /usr/lib
	COPY --from=node:$(find_version nodejs)-alpine /usr/local/share /usr/local/share
	COPY --from=node:$(find_version nodejs)-alpine /usr/local/lib /usr/local/lib
	COPY --from=node:$(find_version nodejs)-alpine /usr/local/include /usr/local/include
	COPY --from=node:$(find_version nodejs)-alpine /usr/local/bin /usr/local/bin" >> /tmp/Dockerfile ; }
